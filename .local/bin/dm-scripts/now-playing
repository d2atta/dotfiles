#!/bin/sh

# now-playing
# get the metadata from the active player
#====================================================================

metadata=$(playerctl metadata --format 'title=[{{ title }}] artist=[{{ artist }}] album=[{{ xesam:album }}] player=[{{ playerName }}] status=[{{ emoji(status) }}] arturl=[{{ mpris:artUrl }}] position=[{{ duration(position) }}] duration=[{{ duration(mpris:length) }}] url=[{{ emoji(xesam:url) }}]')

# variables
#=====================
title=$(echo "${metadata}" | awk -F'[][]' -v RS="" '/title/ {print $2}' | awk 'length > 25{$0=substr($0,0,26)"..."}1')
artist=$(echo "${metadata}" | awk -F'[][]' '/artist/ {print $4}')
player=$(echo "${metadata}" | awk -F'[][]' -v RS=" " '/player/ {print $2}' | awk '{for(i=1;i<=NF;i++){ $i=toupper(substr($i,1,1)) substr($i,2) }}1')
status=$(echo "${metadata}" | awk -F'[][]' -v RS=" " '/status/ {print $2}')
album=$(echo "${metadata}" | awk -F'[][]' '/album/ {print $6}')
url="$(echo "${metadata}" | awk -F'[][]' -v RS="" '/url/ {print $18}' | tr -d '\n')"
position=$(echo "${metadata}" | awk -F'[][]' -v RS=" " '/position/ {print $2}')
# duration=$(echo "${metadata}" | awk -F'[][]' -v RS=" " '/duration/ {print $2}')

# Fallback variables
#======================
# position_fallback='Unknown'
# duration_fallback='Unknown'
artist_fallback='Unknown'
album_fallback='Unknown'
icon_fallback="$XDG_CONFIG_HOME/ncmpcpp/ncmpcpp-ueberzug/fallback.png"

mpv_thumbnail () {
  ffmpeg \
	  -hide_banner \
	  -stats -v panic \
	  -ss "${position}" \
	  -y \
	  -i "$1" \
	  -q:v 2 -f image2 \
	  -vframes 1 \
	  -filter:v scale="-1:120" \
	  "${output}" 2>/dev/null
}

mpd_thumbnail () {
    ffmpeg \
	    -y \
	    -i "$1" \
	    "${output}" 2>/dev/null
}

# icon
arturl=$(echo "${metadata}" | awk -F'[][]' -v RS=" " '/arturl/ {print $2}')
if [ "$arturl" ]; then
	# expr check if icon starts with https://
	# ==========================================
	iconcheck=$(expr "${arturl}" : "http.*://")
	# if urlcheck not equal to 0 its a http link
	if [ "${iconcheck}" -ne 0 ]; then
	    imageurl=$(echo "${metadata}" | awk -F'[][]' -v RS=" " '/arturl/ {print $2}' | sed 's#http.*://##')
	    curltmp=$(mktemp /tmp/playerctlXXX --suffix=.png)
	    output=$(mktemp /tmp/playerctlXXX --suffix=.png)
	    curl "${imageurl}" -o "${curltmp}" 2>/dev/null
	    rm -rf "$curltmp"
	    convert "${curltmp}" -resize x120 "${output}"
	    icon="${output}"
	else
	    output=$(mktemp /tmp/playerctlXXX --suffix=.png)
	    file="$(printf "%s" "$arturl" | sed 's#file://##')"
	    cp "${file}" "${output}"
	    icon="${output}"
	fi
else
	# check if url starts with file://
	#====================================================================
	urlcheck=$(expr "${url}" : "file://")
	if [ "${urlcheck}" -eq 7 ]; then
	  # remove file:// replace %20 with a space and remove new line
	  file="$(printf '%s' "$url" | sed 's#file://##;s#%20#\ #g' | tr -d '\n')"
	  output=$(mktemp /tmp/playerctlXXX --suffix=.png)
	  case $player in
		  Mpd) mpd_thumbnail "$file";;
		  Mpv) mpv_thumbnail "$file";;
	  esac
	  icon="${output}"
	fi
fi

body="󰠃 ${artist:=${artist_fallback}}\n󰎆 ${album:=${album_fallback}}"
notify-send -i "${icon:=${icon_fallback}}" "${status} ${title}" "${body}"
kill -36 "$(cat ~/.cache/pidofbar)" &
rm -rf "$output" &
